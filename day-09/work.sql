SELECT COUNT(*) NO_OF_EMPS, COUNT(REGION) NO_OF_REGIONS FROM EMPLOYEES;
SELECT EMPLOYEE_ID, REGION FROM EMPLOYEES;

CREATE TABLE DUMMY(
FNAME VARCHAR(20),
LNAME VARCHAR(20)
);
INSERT INTO DUMMY VALUES ('VINOD', 'KUMAR'), (NULL, NULL), (NULL, NULL), ('KISHORE', NULL);
SELECT * FROM DUMMY;
SELECT COUNT(*), COUNT(FNAME), COUNT(LNAME) FROM DUMMY;

SELECT COUNT(*), 
	ROUND(SUM(UNIT_PRICE*UNITS_IN_STOCK)) AS STOCK_VALUE,
	COUNT(DISTINCT CATEGORY_ID) AS NO_OF_CATEGORIES,
	AVG(UNIT_PRICE) AS AVERAGE_PRICE,
	MIN(UNIT_PRICE) AS CHEAPEST_PRODUCT,
	MAX(UNIT_PRICE) AS COSTLIEST_PRODUCT
	FROM PRODUCTS;

	
SELECT CATEGORY_ID, COUNT(*) FROM PRODUCTS
	GROUP BY CATEGORY_ID;
	
SELECT CATEGORY_ID, SUM(UNIT_PRICE*UNITS_IN_STOCK) AS CATEGORY_STOCK_VALUE 
	FROM PRODUCTS 
	GROUP BY CATEGORY_ID
	ORDER BY CATEGORY_ID;
	
SELECT CATEGORY_NAME, DESCRIPTION, SUM(UNIT_PRICE*UNITS_IN_STOCK) AS CATEGORY_STOCK_VALUE 
	FROM PRODUCTS P
	JOIN CATEGORIES C
	ON P.CATEGORY_ID=C.CATEGORY_ID
	GROUP BY CATEGORY_NAME, DESCRIPTION
	ORDER BY CATEGORY_STOCK_VALUE DESC;
	
		
-- GET ALL CUSTOMER NAMES AND THE TOTAL ORDER AMOUNT FOR EACH CUSTOMER
-- ONLY IF THE TOTAL ORDER AMOUNT IS MORE THAN $10000.

SELECT C.COMPANY_NAME, SUM(OD.UNIT_PRICE*OD.QUANTITY*(1-OD.DISCOUNT)) AS ORDER_AMOUNT
	FROM CUSTOMERS C
	JOIN ORDERS O ON C.CUSTOMER_ID=O.CUSTOMER_ID
	JOIN ORDER_DETAILS OD ON O.ORDER_ID=OD.ORDER_ID
	GROUP BY C.COMPANY_NAME
	HAVING SUM(OD.UNIT_PRICE*OD.QUANTITY*(1-OD.DISCOUNT))>10000 -- CANNOT USE ALIAS
	ORDER BY ORDER_AMOUNT DESC; -- CAN USE ALIAS
	

SELECT C.* FROM CUSTOMERS C
LEFT JOIN ORDERS O ON C.CUSTOMER_ID=O.CUSTOMER_ID
WHERE O.ORDER_ID IS NULL;

SELECT * FROM CUSTOMERS 
WHERE CUSTOMER_ID NOT IN (SELECT CUSTOMER_ID FROM ORDERS);

SELECT * FROM CUSTOMERS 
	WHERE CUSTOMER_ID IN (
		SELECT CUSTOMER_ID FROM CUSTOMERS
		EXCEPT
		SELECT CUSTOMER_ID FROM ORDERS
	);

-- GET CUSTOMER NAMES ALONG WITH THE ORDERS (ORDER_ID) PLACED BY THE SAME
SELECT COMPANY_NAME, COUNT(ORDER_ID), ARRAY_AGG(ORDER_ID)
	FROM ORDERS
	JOIN CUSTOMERS USING(CUSTOMER_ID)
	GROUP BY COMPANY_NAME
	ORDER BY COMPANY_NAME;
	
-- GET THE NAME OF THE SUPPLIER AND THE NAMES OF THE PRODUCTS SUPPLIED BY THE SUPPLIER
SELECT COMPANY_NAME, PRODUCT_NAME, UNITS_IN_STOCK
	FROM SUPPLIERS
	JOIN PRODUCTS USING(SUPPLIER_ID)
	ORDER BY COMPANY_NAME;

SELECT COMPANY_NAME, STRING_AGG(FORMAT('%s (%s)', PRODUCT_NAME, UNITS_IN_STOCK), ', ' ORDER BY UNITS_IN_STOCK DESC)
	FROM SUPPLIERS
	JOIN PRODUCTS USING(SUPPLIER_ID)
	GROUP BY COMPANY_NAME
	ORDER BY COMPANY_NAME;


-- WHAT IS THE TOTAL ORDER AMOUNT PROCESSED BY EACH EMPLOYEES?
-- WE NEED EMPLOYEE NAMES AND CORRESPONDING ORDER TOTAL (SUM OF UNIT_PRICE*QUANTITY*(1-DISCOUNT))

SELECT CONCAT_WS(' ', TITLE_OF_COURTESY, FIRST_NAME, LAST_NAME) AS EMPLOYEE_NAME,
	SUM(UNIT_PRICE*QUANTITY*(1-DISCOUNT)) AS ORDER_TOTAL
	FROM EMPLOYEES
	JOIN ORDERS USING (EMPLOYEE_ID)
	JOIN ORDER_DETAILS USING (ORDER_ID)
	GROUP BY EMPLOYEE_NAME
	ORDER BY EMPLOYEE_NAME;

-- LIST ALL PRODUCTS THAT ARE PRICED ABOVE THE AVERAGE PRICE OF A PRODUCT
SELECT AVG(UNIT_PRICE) FROM PRODUCTS;
SELECT * FROM PRODUCTS WHERE UNIT_PRICE>28.83389;

SELECT * FROM PRODUCTS WHERE UNIT_PRICE > (SELECT AVG(UNIT_PRICE) FROM PRODUCTS);

-- ERROR: more than one row returned by a subquery used as an expression
SELECT * FROM PRODUCTS WHERE CATEGORY_ID = (SELECT DISTINCT CATEGORY_ID FROM PRODUCTS);

-- LIST ALL THE PRODUCTS WHICH BELONG TO THE SAME CATEGORY AS PRODUCT WITH ID 34

SELECT CATEGORY_ID FROM PRODUCTS WHERE PRODUCT_ID=34;
SELECT * FROM PRODUCTS WHERE CATEGORY_ID=1;

SELECT * FROM PRODUCTS WHERE CATEGORY_ID=(SELECT CATEGORY_ID FROM PRODUCTS WHERE PRODUCT_ID=34);

-- IMAGINE A SUPPLIER (SAY WITH ID 3) HAS SUPPLIED PRODUCTS OF DIFFERENT CATEGORIES
-- LIST ALL PRODUCTS BELONGING TO ANY OF THOSE CATEGORIES
SELECT DISTINCT CATEGORY_ID FROM PRODUCTS WHERE SUPPLIER_ID=3;
SELECT * FROM PRODUCTS WHERE CATEGORY_ID = ANY (SELECT DISTINCT CATEGORY_ID FROM PRODUCTS WHERE SUPPLIER_ID=3)
SELECT * FROM PRODUCTS WHERE CATEGORY_ID IN (SELECT DISTINCT CATEGORY_ID FROM PRODUCTS WHERE SUPPLIER_ID=3)


-- GET ALL THE EMPLOYEES WHO REPORT TO THE SAME MANAGER AS THE EMPLOYEE WITH ID 1
SELECT * FROM EMPLOYEES 
	WHERE REPORTS_TO = (SELECT REPORTS_TO FROM EMPLOYEES WHERE EMPLOYEE_ID=1)


-- GET ALL THE PRODUCTS WHICH ARE PRICED ABOVE THE AVERAGE PRICE OF THE PRODUCTS IN RESPECTIVE CATEGORIES;
SELECT AVG(UNIT_PRICE) FROM PRODUCTS WHERE CATEGORY_ID=2;
SELECT * FROM PRODUCTS WHERE CATEGORY_ID=2 AND UNIT_PRICE>22.854166825612385;

SELECT * FROM PRODUCTS P1
	WHERE UNIT_PRICE > (SELECT AVG(UNIT_PRICE) FROM PRODUCTS P2 WHERE P2.CATEGORY_ID=P1.CATEGORY_ID)
	ORDER BY P1.CATEGORY_ID;
	
-- find and list all products 
-- along with the total number of orders that have been placed for each of these products

SELECT P1.PRODUCT_ID, P1.PRODUCT_NAME, P1.UNITS_IN_STOCK, (
	SELECT COUNT(*) FROM ORDERS O JOIN ORDER_DETAILS OD USING (ORDER_ID)
	WHERE OD.PRODUCT_ID=P1.PRODUCT_ID
) AS NUM_ORDERS FROM PRODUCTS P1
ORDER BY P1.PRODUCT_ID;

-- get 3 costliest products with in each category
SELECT CATEGORY_NAME, PRODUCT_NAME, UNIT_PRICE
	FROM CATEGORIES
	JOIN PRODUCTS P1 USING (CATEGORY_ID)
	WHERE UNIT_PRICE >= ANY (
		SELECT UNIT_PRICE FROM PRODUCTS WHERE CATEGORY_ID=P1.CATEGORY_ID
		ORDER BY UNIT_PRICE DESC
		LIMIT 3
	)
	ORDER BY CATEGORY_NAME, UNIT_PRICE DESC;

SELECT o.ORDER_ID, 
(SUM(od.UNIT_PRICE * od.Quantity) - SUM(od.UNIT_PRICE * od.Quantity * (1 - od.Discount))) AS total_revenue,
(SUM(od.UNIT_PRICE * od.Quantity * od.Discount)) AS total_cost,
(SUM(od.UNIT_PRICE * od.Quantity) - SUM(od.UNIT_PRICE * od.Quantity * (1 - od.Discount)) - SUM(od.UNIT_PRICE * od.Quantity * od.Discount)) AS total_profit
FROM ORDERS o
JOIN ORDER_DETAILS od ON o.ORDER_ID = od.ORDER_ID
GROUP BY o.ORDER_ID;

SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(PHONE, '.', ''), '-', ''), '(', ''), ')', ''), ' ', '') FROM CUSTOMERS;

SELECT REGEXP_REPLACE(PHONE, '[\.|\-|\)|\(|\s]+', '', 'g') as PHONE_NEW FROM CUSTOMERS 
WHERE LENGTH(REGEXP_REPLACE(PHONE, '[\.|\-|\)|\(|\s]+', '', 'g'))>=10;


SELECT CONCAT('(', SUBSTR(REGEXP_REPLACE(PHONE, '[\.|\-|)|(|\s]+', '', 'g'), 1, 3), ') ', SUBSTR(REGEXP_REPLACE(PHONE, '[\.|\-|\)|\(|\s]+', '', 'g'), 4, 3), '-', SUBSTR(REGEXP_REPLACE(PHONE, '[\.|\-|\)|\(|\s]+', '', 'g'), 7))
FROM CUSTOMERS;

	